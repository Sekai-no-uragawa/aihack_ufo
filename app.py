# import json
# from io import BytesIO
# from PIL import Image
# import os

from pyrsistent import s
import streamlit as st
from streamlit_lottie import st_lottie
import json
from PIL import Image
from io import BytesIO, StringIO
import base64
import numpy as np
import torch
import urllib



# def upload_image_ui():
#     uploaded_image = st.file_uploader("Please choose an image file", type=["png", "jpg", "jpeg"])
#     if uploaded_image is not None:
#         try:
#             image = Image.open(uploaded_image)
#         except Exception:
#             st.error("Error: Invalid image")
#         else:
#             img_array = np.array(image)
#             return img_array


@st.experimental_memo
def load_weights():
    url = 'https://github.com/Sekai-no-uragawa/aihack_ufo/releases/download/weights/one_class_weights.pt'
    filename = url.split('/')[-1]
    urllib.request.urlretrieve(url, filename)
    return filename

@st.experimental_memo
def load_model(weights_file):
    model = torch.hub.load('ultralytics/yolov5', 'custom', path=weights_file)
    return model

def main_page():
    file_types = ["png", "jpg", "jpeg"]

    c10, c20, c30 = st.columns([1, 6, 1])
    with c20:
        st.title("–ó–¥–æ—Ä–æ–≤—ã–µ –∑—É–±—ã - ***–∫—Ä—É—Ç–æ***")
        st.subheader('–ü–æ–∏—Å–∫ –∫–∞—Ä–∏–µ—Å–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò')
        st.write('''
        –î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –≤–∞–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑—É–±–æ–≤ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–∞—Ä–∏–µ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n
        **–í–Ω–∏–º–∞–Ω–∏–µ!** –°–µ—Ä–≤–∏—Å –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–∏—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—Ä–∏–µ—Å–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, 
        —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!\n
        \n
        _–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏_:
        ''')
    

    _, c1, c2, _= st.columns([1, 3, 3, 1])
    
    with c1:
        example1 = Image.open("data/teeth_example4.jpg")
        st.image(example1)
    with c2:
        example2 = Image.open('data/teeth_example3.jpg')
        st.image(example2)

    

    c10, c20, c30 = st.columns([1, 6, 1])
    with c20:
        st.write('''
        ___
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∏–∂–µ:
        ''')

    _, c1, _= st.columns([1, 4, 1])
    with c1:
        file = st.file_uploader("Upload file", type=file_types)
        show_file = st.empty()
        if not file:
            show_file.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: " + ", ".join(file_types))
        #content = file.getvalue()
    with c1:
        if isinstance(file, BytesIO):
            show_file.image(file)
            
            image = Image.open(file)

            weights_file = load_weights()
            model = load_model(weights_file)

            results = model(image, size=256)

            results.render()
            im_base64 = Image.fromarray(results.imgs[0])
            st.image(im_base64)
            file.close()

                      
    
def doctor_page():
    with st.columns([1,6,1])[1]:
        st.title('–ó–¥–æ—Ä–æ–≤—ã–µ –∑—É–±—ã - ***–∫—Ä—É—Ç–æ***')
        instructions = """
            –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–æ—à–∫–æ–ª—å–Ω—ã—Ö/—à–∫–æ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
            """
        st.subheader(instructions)
        st.write('–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    
    #Table
    col1, col2, buff2 = st.columns([1,3,1])
    id = col1.number_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–µ—Ç–µ–π',step=1, key ="but1")
    st.write('–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    buff2.title('')

    def show_img(file):
        json_file = json.loads(file.getvalue())
        image = base64.b64decode(json_file[0]['data'])
        st.image(image)

    # if file is not None:
    #     show_img(file)
        #st.write(file)
        #st.write(file.getvalue())
        #st.write(file.getvalue().decode("utf-8"))
        #lottie_json = load_lottieurl(file.name)
        #st_lottie(file.getvalue())
        #image = base64.b64decode(json.loads(file.getvalue()))
        #st.write(image)
        #st.image(image)
    for i in range(int(id)):
        col1, col2, col3, col4 = st.columns([1,1,1,2])
        last_name = col1.text_input('–§–∞–º–∏–ª–∏—è', key = f'1{i}')
        first_name = col2.text_input('–ò–º—è', key = f'2{i}' )
        father_name = col3.text_input('–û—Ç—á–µ—Å—Ç–≤–æ', key = f'3{i}')
        image = col4.file_uploader('file upload', key = f'gen{i}')
        preview = col1.empty()
        if image:
            with st.expander("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"):
                col1.preview.image(image)



def sidebar():
    page_names_to_funcs = {
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": main_page,
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –†–∞–±–æ—Ç–Ω–∏–∫–∞": doctor_page,
    }

    lottie_path_teeth = 'data/36878-clean-tooth.json' 
    with open(lottie_path_teeth, "r") as f:
        lottie_teeth = json.load(f)

    with st.sidebar:
        st_lottie(
            lottie_teeth,
            loop = True,
            quality='high',
            height=300,
            width=200,
        )

    selected_page = st.sidebar.selectbox("–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É", page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()

    st.sidebar.markdown(
        '''
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è (Yolo)
        –î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
        1. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ –≤–Ω–µ—à–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑—É–±–æ–≤
        2. –°–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –¥–æ—à–∫–æ–ª—å–Ω—ã—Ö/—à–∫–æ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤
        
        –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö - –∫–∞–∫ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª—é–±—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–∞–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 
        –¥–∞–∂–µ –Ω–µ–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –≤ —à–∫–æ–ª–∞—Ö –∏ —Å–∞–¥–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –¥–µ—Ç–µ–π.
        \n
        ___
        Developed by team **fit_predict**
        2022 –≥.
        '''
    )

if __name__ == '__main__':
    st.set_page_config(
        page_title="–ö–∞—Ä–∏–µ—Å–∞.–Ω–µ—Ç",
        page_icon="üç´",
        layout="wide",
    )

    # STYLES
    with open('data/style.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html = True)
    
    sidebar()
    
    
